<!DOCTYPE html>
<html>
	<head>
		<title> Whitepages Signal Demo></title>
		<script
			src="//media.twiliocdn.com/sdk/js/common/v0.1/twilio-common.min.js"></script>
		<script type="text/javascript"
			src="//static.twilio.com/libs/twiliojs/1.2/twilio.min.js"></script>
		<script type="text/javascript"
			src="//media.twiliocdn.com/sdk/js/sync/v0.2/twilio-sync.min.js"></script>
		<script async defer
			src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDvVu_iwRiZiV-AKS4GV1cujpiDsV_FUWo&callback=initMap"></script>
		<script
			src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
		<script
			src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0/handlebars.min.js"></script>
		<script type='text/javascript'>
		var data;
		var map;
		var markers = [];
		var infoWindows = [];
		var globalConn;
		var accessManager;
		var syncClient;
		var syncDoc;
		// Get an access token for the client by passing a device ID.
		$.getJSON('token',
		{
			device: 'test1234'
		}, function (tokenResponse)
		{
			// Initialize the Sync Client
			accessManager = new Twilio.AccessManager(tokenResponse.token);
			syncClient = new Twilio.Sync.Client(accessManager);
			// Creates a Sync Doc if needed
			syncClient.document('TwilioChannel').then(function(doc)
			{
				doc.on('updated', function(data)
				{
					syncDoc = doc;
					callData = syncDoc.get();
					newCall(data);
				});
			});
		});
		Twilio.Device.setup('<%= token %>', {debug: false});
		// Might not be necessary as we can probably handle everything in incoming.
		Twilio.Device.connect(function(conn)
		{
			// Use voice to text to tell them that their pin will be dropped shortly
		})
		Twilio.Device.incoming(function(conn)
		{
			globalConn = conn;
			syncClient.document('TwilioChannel').then(function(doc)
			{
				doc.on('updated', function(data)
				{
					syncDoc = doc;
					callData = syncDoc.get();
					newCall(data);
				});
			});
		});
		function nvl(foo,bar){
			if(foo == null)
				return bar;
			return foo;
		}
		 /* function newCallWrapperForLocalTesting(){
			//copypasted from https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents; see Trevor or Chris for creds
			var newJS = sampleJS[callIndex];
			callIndex += 1;
			if(callIndex >= sampleJS.length)
				callIndex = 0;
			newCall(newJS);
		}
		*/
		function newCall(js){
			var currentdate = new Date();
			// parse data
			var results = {};
			results = js.results.whitepages_pro_caller_id.result;
			var lineType = '';
			var carrier = '';
			var name = '';
			var address = '';
			var lat = 0;
			var lon = 0;
			if(results.length == 0){
				newCallLogLabel = 'Error occurred retreiving call details';
			}
			else{
				//parse phone attributes
				lineType = nvl(js.results.whitepages_pro_caller_id.result.results[0].line_type, 'Unknown Line Type');
				carrier = nvl(js.results.whitepages_pro_caller_id.result.results[0].carrier,'Unknown Carrier');
				//parse name
				var belongsTo = js.results.whitepages_pro_caller_id.result.results[0];
				if(belongsTo.length == 0)
					name = 'Unknown Caller';
				else{
					name = nvl(js.results.whitepages_pro_caller_id.result.results[0].belongs_to[0].names[0].first_name,'');
					name += ' ';
					name += nvl(js.results.whitepages_pro_caller_id.result.results[0].belongs_to[0].names[0].last_name,'Unknown Caller');
				}
				name = name.trim();
				//parse address
				var locs = js.results.whitepages_pro_caller_id.result.results[0].associated_locations;
				if(locs.length == 0)
					address = 'Unknown Location';
				else{
					address = nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].standard_address_line1,'');
					address += ' ';
					address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].city,'');
					address += ', ';
					address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].state_code,'');
					address += ' ';
					address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].postal_code,'');
					address += ' ';
					address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].country_code,'');
					address = address.trim();
					if(address[0] == ',')
						address = address.substring(1).trim();
					lat = js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].lat_long.latitude;
					lon = js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].lat_long.longitude;
				}
			}
			//build label text
			var newCallLogLabel = carrier+' '+lineType+'<br>'+name+'<br>'+address;
			//add marker and infowindow
			var latLon = {lat: lat, lng: lon};
			var newMarker = new google.maps.Marker({position: latLon, map: map});
			var infowindow = new google.maps.InfoWindow({
				content: newCallLogLabel
			});
			markers.unshift(newMarker);
			infoWindows.unshift(infowindow);
			infowindow.open(map, newMarker);
			//keep no more than 5 markers / infowindows
			if(markers.length > 5){
				var i = infoWindows.pop();
				var m = markers.pop();
				i.close();
				m.setMap(null);
			}
		}
		function initMap(){
			var centerPoint = {lat: 38, lng: -96};
			map = new google.maps.Map(document.getElementById('callmap'), {
						zoom: 5,
						center: centerPoint,
						mapTypeId: 'terrain'
					});
		}
		</script>
	</head>
	<body>
		<input type='button' value='receive new call' onclick='newCallWrapperForLocalTesting()'/>
		<div id='calllog'></div>
		<div id='callmap' style="width: 1400px; height: 800px;"></div>
	</body>
</html>
