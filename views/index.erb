<!DOCTYPE html>
<html>
	<head>
		<title> Whitepages Signal Demo></title>
		<script
			src="//media.twiliocdn.com/sdk/js/common/v0.1/twilio-common.min.js"></script>
		<script type="text/javascript"
			src="//static.twilio.com/libs/twiliojs/1.2/twilio.min.js"></script>
		<script type="text/javascript"
			src="//media.twiliocdn.com/sdk/js/sync/v0.2/twilio-sync.min.js"></script>
		<script async defer
			src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDvVu_iwRiZiV-AKS4GV1cujpiDsV_FUWo&callback=initMap"></script>
		<script
			src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
		<script
			src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0/handlebars.min.js"></script>
		<link href="css/sClient.css"
			type="text/css" rel="stylesheet" />
		<style>
		</style>
		<script type='text/javascript'>

		var data;
		var map;
		var markers = [];
		var infoWindows = [];
		var sampleJS = [];
		var callIndex = 0;
		var globalConn;
		var accessManager;
		var syncClient;
		var syncDoc;
		var centerPoint = {lat: 38, lng: -96};
		var westPoint = {lat: 43.8, lng: -122};
		var sfPoint = {lat: 37.8, lng: -122};

		sampleJS.push('{"documents": [{"unique_name": "TwilioChannel", "url": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents/ET80c5020fd1cc4ed283cdfc5a7883caa9", "created_by": "twilioTest", "account_sid": "AC3568011c5b1ea77994ed50387219eb8e", "date_updated": "2017-05-02T20:46:04Z", "sid": "ET80c5020fd1cc4ed283cdfc5a7883caa9", "date_created": "2016-08-11T21:53:09Z", "service_sid": "IS29396a29519d9672cb5e6e008d33ba0a", "data": {"code": null, "message": null, "results": {"whitepages_pro_caller_id": {"result": {"messages": [], "results": [{"carrier": "AT&T", "belongs_to": [{"age_range": {"start": 30, "end": 34}, "names": [{"last_name": "Anderson", "salutation": null, "middle_name": "O", "suffix": null, "first_name": "Trevor"}], "gender": "Male", "phones": null, "locations": null, "id": {"type": "Person", "key": "Person.0ecd4b5e-ad79-4ac4-abb7-e662b664da2c.Durable"}}], "is_valid": true, "line_type": "Mobile", "associated_locations": [{"not_receiving_mail_reason": null, "address_type": "Street", "city": "Seattle", "delivery_point": "SingleUnit", "lat_long": {"latitude": 47.566734, "accuracy": "RoofTop", "longitude": -122.372368}, "usage": "Residential", "zip4": "2645", "type": "Address", "is_receiving_mail": true, "legal_entities_at": null, "country_code": "US", "standard_address_line2": "", "is_historical": false, "standard_address_line1": "4040 32nd Ave SW", "id": {"type": "Location", "key": "Location.4ae7a41f-2e71-416e-94b9-0583d9ac819a.Durable"}, "is_deliverable": true, "postal_code": "98126", "state_code": "WA", "valid_for": {"stop": null, "start": {"month": 6, "year": 2014, "day": 18}}}], "is_prepaid": false, "phone_number": "2066013561", "id": {"type": "Phone", "key": "Phone.baf36fef-a2df-4b08-cfe3-bc7128b6f649.Durable"}, "country_calling_code": "1"}]}, "code": null, "message": null, "request_sid": "XR3b1d4e40acb4cfc0035da2347829e25c", "status": "successful"}, "whitepages_pro_phone_intel": {"result": {"messages": [], "results": [{"carrier": "AT&T", "is_valid": true, "line_type": "Mobile", "is_prepaid": null, "phone_number": "2066013561", "id": {"type": "Phone", "key": "Phone.baf36fef-a2df-4b08-cfe3-bc7128b6f649.Ephemeral"}, "country_calling_code": "1"}]}, "code": null, "message": null, "request_sid": "XRaa084e2d6ff907ffa763f5065520aec8", "status": "successful"}, "whitepages_pro_phone_rep": {"result": {"messages": [], "results": [{"reputation": {"report_count": 0, "level": 1, "details": [{"score": 11, "category": "NotApplicable", "type": "NotApplicable"}], "volume_score": 1}, "phone_number": "2066013561"}]}, "code": null, "message": null, "request_sid": "XRf38d587d5deb0e02025e162317d87ca8", "status": "successful"}}, "status": "successful"}, "revision": "bb", "links": {"permissions": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents/ET80c5020fd1cc4ed283cdfc5a7883caa9/Permissions"}}], "meta": {"page": 0, "page_size": 50, "first_page_url": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents?PageSize=50&Page=0", "previous_page_url": null, "url": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents?PageSize=50&Page=0", "next_page_url": null, "key": "documents"}}');
		sampleJS.push('{"documents": [{"unique_name": "TwilioChannel", "url": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents/ET80c5020fd1cc4ed283cdfc5a7883caa9", "created_by": "twilioTest", "account_sid": "AC3568011c5b1ea77994ed50387219eb8e", "date_updated": "2017-05-02T18:10:41Z", "sid": "ET80c5020fd1cc4ed283cdfc5a7883caa9", "date_created": "2016-08-11T21:53:09Z", "service_sid": "IS29396a29519d9672cb5e6e008d33ba0a", "data": {"code": null, "message": null, "results": {"whitepages_pro_caller_id": {"result": {"messages": [], "results": [{"carrier": "Verizon Wireless", "belongs_to": [{"age_range": null, "names": [{"last_name": "Hales", "salutation": null, "middle_name": null, "suffix": null, "first_name": "Chris"}], "gender": null, "phones": null, "locations": null, "id": {"type": "Person", "key": "Person.0523e529-4efb-41a9-bc60-98826b8168da.Durable"}}], "is_valid": true, "line_type": "Mobile", "associated_locations": [{"not_receiving_mail_reason": null, "address_type": null, "city": "Bellevue", "delivery_point": null, "lat_long": {"latitude": 47.5605, "accuracy": "PostalCode", "longitude": -122.1581}, "usage": null, "zip4": null, "type": "CityPostalCode", "is_receiving_mail": null, "legal_entities_at": null, "country_code": "US", "standard_address_line2": "", "is_historical": false, "standard_address_line1": "", "id": {"type": "Location", "key": "Location.abbe0b4a-b90b-462c-ac0c-c45f775f9a41.Durable"}, "is_deliverable": null, "postal_code": "98006", "state_code": "WA", "valid_for": null}], "is_prepaid": null, "phone_number": "4258943931", "id": {"type": "Phone", "key": "Phone.a7776fef-a2e0-4b08-cfe3-bc7128b7fbb4.Durable"}, "country_calling_code": "1"}]}, "code": null, "message": null, "request_sid": "XRa3f5053614a097e2674ece1c4b2a583c", "status": "successful"}, "whitepages_pro_phone_intel": {"result": {"messages": [], "results": [{"carrier": "Verizon Wireless", "is_valid": true, "line_type": "Mobile", "is_prepaid": null, "phone_number": "4258943931", "id": {"type": "Phone", "key": "Phone.a7776fef-a2e0-4b08-cfe3-bc7128b7fbb4.Ephemeral"}, "country_calling_code": "1"}]}, "code": null, "message": null, "request_sid": "XR1e0ef152c71ff7689f68c481a4052c52", "status": "successful"}, "whitepages_pro_phone_rep": {"result": {"messages": [], "results": [{"reputation": {"report_count": 0, "level": 1, "details": [{"score": 11, "category": "NotApplicable", "type": "NotApplicable"}], "volume_score": 1}, "phone_number": "4258943931"}]}, "code": null, "message": null, "request_sid": "XR854ac4d98ec9963ddf447c429257c422", "status": "successful"}}, "status": "successful"}, "revision": "ba", "links": {"permissions": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents/ET80c5020fd1cc4ed283cdfc5a7883caa9/Permissions"}}], "meta": {"page": 0, "page_size": 50, "first_page_url": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents?PageSize=50&Page=0", "previous_page_url": null, "url": "https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents?PageSize=50&Page=0", "next_page_url": null, "key": "documents"}}');
		// Get an access token for the client by passing a device ID.
		$.getJSON('token',
		{
			device: 'test1234'
		}, function (tokenResponse)
		{
			// Initialize the Sync Client
			accessManager = new Twilio.AccessManager(tokenResponse.token);
			syncClient = new Twilio.Sync.Client(accessManager);
			// Creates a Sync Doc if needed
			syncClient.document('TwilioChannel').then(function(doc)
			{
				doc.on('updated', function(data)
				{
					syncDoc = doc;
					callData = syncDoc.get();
					newCall(data);
				});
			});
		});
		Twilio.Device.setup('<%= token %>', {debug: false});
		// Might not be necessary as we can probably handle everything in incoming.
		Twilio.Device.connect(function(conn)
		{
			// Use voice to text to tell them that their pin will be dropped shortly
		})
		Twilio.Device.incoming(function(conn)
		{
			globalConn = conn;
			syncClient.document('TwilioChannel').then(function(doc)
			{
				doc.on('updated', function(data)
				{
					syncDoc = doc;
					callData = syncDoc.get();
					newCall(data);
				});
			});
		});

		function newCallWrapperForLocalTesting(){
			//copypasted from https://preview.twilio.com/Sync/Services/IS29396a29519d9672cb5e6e008d33ba0a/Documents; see Trevor or Chris for creds
			var newJS = sampleJS[callIndex];
			callIndex += 1;
			if(callIndex >= sampleJS.length)
				callIndex = 0;
			newCall(newJS);
		}

		function nvl(foo,bar){
			if(foo == null)
				return bar;
			return foo;
		}

		function newCall(js)
		{
			var currentdate = new Date();
			// parse data
			var results = {};
			results = js.results.whitepages_pro_caller_id.result;
			var lineType = '';
			var carrier = '';
			var name = '';
			var address = '';
			var lat = 0;
			var lon = 0;
			var newCallLogLabel = '';
			if(results.length == 0){
				newCallLogLabel = 'Error occurred retreiving call details';
			}
			else{
				//parse phone attributes
				// lineType = nvl(js.results.whitepages_pro_caller_id.result.results[0].line_type, 'Unknown Line Type');
				carrier = nvl(js.results.whitepages_pro_caller_id.result.results[0].carrier,'Unknown Carrier');
				//parse name
				if (js.results.whitepages_pro_caller_id.result.results[0].belongs_to[0])
				{
					if (js.results.whitepages_pro_caller_id.result.results[0].belongs_to[0].names)
					{
						name = nvl(js.results.whitepages_pro_caller_id.result.results[0].belongs_to[0].names[0].first_name[0],'');
						name += ' ';
						name += nvl(js.results.whitepages_pro_caller_id.result.results[0].belongs_to[0].names[0].last_name,'Unknown Caller');
					}
					else
					{
						name = nvl(js.results.whitepages_pro_caller_id.result.results[0].belongs_to[0].name,'Unknown Caller');
					}
				}
				else
				{
					name = 'Unknown Caller';
				}
				name = name.trim();
				//parse address
				var locs = js.results.whitepages_pro_caller_id.result.results[0].associated_locations;
				if(locs.length == 0)
					address = 'Unknown Location';
				else{
					// address = nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].standard_address_line1,'');
					address += ' ';
					address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].city,'');
					address += ', ';
					address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].state_code,'');
					address += ' ';
					// address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].postal_code,'');
					address += ' ';
					// address += nvl(js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].country_code,'');
					address = address.trim();
					if(address[0] == ',')
						address = address.substring(1).trim();
					lat = js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].lat_long.latitude;
					lon = js.results.whitepages_pro_caller_id.result.results[0].associated_locations[0].lat_long.longitude;
				}
			}
			//build label text
			var newCallLogLabel = name+'<br>'+address+'<br>'+carrier+' '+lineType;
			console.log(newCallLogLabel);
			//add marker and infowindow
			var latLon = {lat: lat, lng: lon};
			addMarkerWithTimeout(latLon, newCallLogLabel, markers.length * 200)
			// Zoom to fit the new markers
			if (markers.length > 3 && makers.length % 10 == 0)
			{
				var newBoundary = new google.maps.LatLngBounds();
				for (index in markers){
					var position = markers[index].position;
					newBoundary.extend(position);
				}
				map.fitBounds(newBoundary);
			}

			//keep no more than 5 markers / infowindows
			if(markers.length > 25)
			{
				var i = infoWindows.pop();
				var m = markers.pop();
				i.close();
				m.setMap(null);
			}
		}

		function initMap()
		{
			map = new google.maps.Map(document.getElementById('callmap'), {
						zoom: 5,
						center: centerPoint,
						mapTypeId: 'terrain'
					});
		}

		function addMarkerWithTimeout(position, label, timeout){
			window.setTimeout(function(){
				var icon = {url: 'images/pin.png', scaledSize: google.maps.scaledSize(50, 50)};
				var newMarker = new google.maps.Marker({ position: position, map: map, icon: icon, animation: google.maps.Animation.DROP});
				var infowindow = new google.maps.InfoWindow({ content: label });
				console.log(latLon);
				markers.unshift(newMarker);
				infoWindows.unshift(infowindow);
				infowindow.open(map, newMarker);
			}, timeout);
		}

		function zoomResetUs()
		{
			map.setCenter(centerPoint);
			map.setZoom(5);
		}

		function zoomResetWest()
		{
			map.setCenter(westPoint);
			map.setZoom(6);
		}

		function zoomResetSf()
		{
			map.setCenter(sfPoint);
			map.setZoom(9);
		}

		</script>
	</head>
	<body>
		<div class = 'logos'>
			<a href = "http://pro.whitepages.com/developer/"> <img src = "//pro.whitepages.com/wp-content/uploads/2014/09/wp-logo-large.png"> </img>  </a>
		</div>
		<div class = 'phone'>
			<h3>Dial (206) 202-2340 for a chance to win a $50 gift card to Amazon!</h3>
		</div>
		<div id = 'frame'>
			<div id = 'callmap' class = 'hotMap' ></div>
		</div>
		<input type = 'button' class = 'hotButton' value = 'Zoom: US' onclick = 'zoomResetUs()'/>
		<input type = 'button' class = 'hotButton' value = 'Zoom: West' onclick = 'zoomResetWest()'/>
		<input type = 'button' class = 'hotButton' value = 'Zoom: SF' onclick = 'zoomResetSf()'/>
		<div class = 'logos'>
			<a href = "https://www.twilio.com"> <img src = "images/twilio-logo-2100x650.png" width = '300px'> </img> </a>
		</div>
		<input type = 'button' class = 'coolButton' value = 'Pin' onclick = 'newCallWrapperForLocalTesting()'/>
	</body>
</html>
